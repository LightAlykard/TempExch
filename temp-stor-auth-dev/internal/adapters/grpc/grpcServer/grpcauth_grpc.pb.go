// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: grpcauth.proto

package grpcServer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JWTChekServiceClient is the client API for JWTChekService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JWTChekServiceClient interface {
	JWTchek(ctx context.Context, in *JWTChekRequest, opts ...grpc.CallOption) (*JWTChekResponse, error)
}

type jWTChekServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJWTChekServiceClient(cc grpc.ClientConnInterface) JWTChekServiceClient {
	return &jWTChekServiceClient{cc}
}

func (c *jWTChekServiceClient) JWTchek(ctx context.Context, in *JWTChekRequest, opts ...grpc.CallOption) (*JWTChekResponse, error) {
	out := new(JWTChekResponse)
	err := c.cc.Invoke(ctx, "/grpcServer.JWTChekService/JWTchek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWTChekServiceServer is the server API for JWTChekService service.
// All implementations must embed UnimplementedJWTChekServiceServer
// for forward compatibility
type JWTChekServiceServer interface {
	JWTchek(context.Context, *JWTChekRequest) (*JWTChekResponse, error)
	mustEmbedUnimplementedJWTChekServiceServer()
}

// UnimplementedJWTChekServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJWTChekServiceServer struct {
}

func (UnimplementedJWTChekServiceServer) JWTchek(context.Context, *JWTChekRequest) (*JWTChekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JWTchek not implemented")
}
func (UnimplementedJWTChekServiceServer) mustEmbedUnimplementedJWTChekServiceServer() {}

// UnsafeJWTChekServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JWTChekServiceServer will
// result in compilation errors.
type UnsafeJWTChekServiceServer interface {
	mustEmbedUnimplementedJWTChekServiceServer()
}

func RegisterJWTChekServiceServer(s grpc.ServiceRegistrar, srv JWTChekServiceServer) {
	s.RegisterService(&JWTChekService_ServiceDesc, srv)
}

func _JWTChekService_JWTchek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTChekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTChekServiceServer).JWTchek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcServer.JWTChekService/JWTchek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTChekServiceServer).JWTchek(ctx, req.(*JWTChekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JWTChekService_ServiceDesc is the grpc.ServiceDesc for JWTChekService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JWTChekService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcServer.JWTChekService",
	HandlerType: (*JWTChekServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JWTchek",
			Handler:    _JWTChekService_JWTchek_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcauth.proto",
}
